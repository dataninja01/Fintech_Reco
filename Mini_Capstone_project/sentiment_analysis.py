# -*- coding: utf-8 -*-
"""Sentiment analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j29qTTah2JvZiP7D5FsdOU2T1VEcIRLs
"""

!pip install datasets

from datasets import load_dataset

dataset = load_dataset("imdb")

dataset

dataset['train'][0]

train= dataset['train']

len(train)

train[0]

test= dataset['test']



import pandas as pd
import numpy as np

df_train = pd.DataFrame.from_dict(train)

df_test = pd.DataFrame.from_dict(test)

df_train.head(), df_test.head(),

#Checking for null and blank reviews

df_train.dropna(inplace=True)


blanks = []  # start with an empty list

for i,rv, lb, in df_train.itertuples():  # iterate over the DataFrame
    if type(rv)==str:            # avoid NaN values
        if rv.isspace():         # test 'review' for whitespace
            blanks.append(i)     # add matching index numbers to the list
blanks
# df.drop(blanks, inplace=True)

import nltk
nltk.download('vader_lexicon')

from matplotlib import pyplot as plt
import sklearn 
from sklearn.pipeline import Pipeline
from sklearn.metrics import *

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC

#Text classification using Linear Support VEctor Classifier
text_clf = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LinearSVC(max_iter=5000))])

y_train = df_train['label']
X_train = df_train['text']
y_test = df_test['label']
X_test = df_test['text']

text_clf.fit(X_train, y_train)

predictions = text_clf.predict(X_test)

accuracy_score(y_test,predictions)

print(classification_report(y_test, predictions))

import pickle
filename = 'final_model.sav'
pickle.dump(text_clf, open(filename, 'wb'))